unit SavedocDetails;

{************************************************************************
 AES 24/6/2018 added ability to search for matter based on description/client name/fileid ssame as search on insight.


*************************************************************************}

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  {Dialogs,} ComObj, StdCtrls, Menus, DB, ActnList,
  ActnMan, Vcl.ExtCtrls, Vcl.ImgList, Vcl.Buttons, Vcl.ComCtrls, Vcl.DBCtrls,
  SaveDoc, cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters,
  cxContainer, cxEdit, cxTextEdit, cxMaskEdit, cxDropDownEdit, cxLookupEdit,
  cxDBLookupEdit, cxDBLookupComboBox, Outlook2000, cxImageComboBox, cxSpinEdit,
  DBAccess, Ora, MemDS, cxMemo, cxButtonEdit, JvBaseDlg, JvBrowseFolder,
  dxLayoutcxEditAdapters, dxLayoutControlAdapters, dxLayoutContainer, cxClasses,
  dxLayoutControl, cxLabel, Vcl.Dialogs;

const
     CUSTOMPROPS: array[0..10] of string = ('MatterNo','DocID','Prec_Category','Prec_Classification','Doc_Keywords','Doc_Precedent','Doc_FileName','Doc_Author','Saved_in_DB', 'Doc_Title','Portal_Access');

type
  TfrmSaveDocDetails = class(TForm)
    btnSave: TBitBtn;
    btnClose: TBitBtn;
    ImageList1: TImageList;
    cbPortalAccess: TCheckBox;
    cbOverwriteDoc: TCheckBox;
    cbLeaveDocOpen: TCheckBox;
    cbNewCopy: TCheckBox;
    StatusBar: TStatusBar;
    cmbPrecCategory: TcxLookupComboBox;
    cmbClassification: TcxLookupComboBox;
    cmbAuthor: TcxLookupComboBox;
    Label7: TLabel;
    neUnits: TcxSpinEdit;
    chkCreateTime: TCheckBox;
    txtDocName: TcxTextEdit;
    edKeywords: TcxTextEdit;
    memoTimeNarration: TcxMemo;
    memoPrecDetails: TcxMemo;
    cmbTasks: TcxLookupComboBox;
    btnEditMatter: TcxButtonEdit;
    btnTxtDocPath: TcxButtonEdit;
    BrowseDlg: TJvBrowseForFolderDialog;
    dxLayoutControl1Group_Root: TdxLayoutGroup;
    dxLayoutControl1: TdxLayoutControl;
    dxLayoutItem1: TdxLayoutItem;
    dxLayoutItem2: TdxLayoutItem;
    dxLayoutItem3: TdxLayoutItem;
    dxLayoutItem4: TdxLayoutItem;
    dxLayoutItem5: TdxLayoutItem;
    dxLayoutItem6: TdxLayoutItem;
    dxLayoutItem7: TdxLayoutItem;
    dxLayoutItem8: TdxLayoutItem;
    dxLayoutItem9: TdxLayoutItem;
    dxLayoutItem10: TdxLayoutItem;
    dxLayoutItem11: TdxLayoutItem;
    dxLayoutItem12: TdxLayoutItem;
    dxLayoutItem13: TdxLayoutItem;
    dxLayoutItem15: TdxLayoutItem;
    dxLayoutItem16: TdxLayoutItem;
    dxLayoutItem17: TdxLayoutItem;
    dxLayoutItem14: TdxLayoutItem;
    dxLayoutItem18: TdxLayoutItem;
    dxLayoutItem19: TdxLayoutItem;
    dxLayoutGroup1: TdxLayoutGroup;
    dxLayoutGroup2: TdxLayoutGroup;
    dxLayoutGroupTime: TdxLayoutGroup;
    dxLayoutGroup4: TdxLayoutGroup;
    dxLayoutItem20: TdxLayoutItem;
    cmbFolder: TcxLookupComboBox;
    dxLayoutItem21: TdxLayoutItem;
    dxLayoutGroupTimeFields: TdxLayoutGroup;
    Memo1: TcxMemo;
    procedure btnCloseClick(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
    procedure rgStorageClick(Sender: TObject);
    procedure btnEditMatterPropertiesValidate(Sender: TObject;
      var DisplayValue: Variant; var ErrorText: TCaption;
      var Error: Boolean);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnTxtDocPathPropertiesButtonClick(Sender: TObject;
      AButtonIndex: Integer);
    procedure cmbCategoryPropertiesInitPopup(Sender: TObject);
    procedure btnEditMatterExit(Sender: TObject);
    procedure dockbtnDefaultPathClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure cbSaveAsPrecedentClick(Sender: TObject);
    procedure chkCreateTimeClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure btnEditMatterPropertiesButtonClick(Sender: TObject;
      AButtonIndex: Integer);
    procedure FormCreate(Sender: TObject);
    procedure btnEditMatterKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
    nMatter: integer;

    tmpFileName: string;
    FPrec_Category: string;
    tmpdir: string;
    FSavedInDB: string;
    FDocName: string;
    FPrec_Classification: string;
    FDoc_Keywords: string;
    FDoc_Precedent: string;
    FDoc_FileName: string;
    FDoc_Author: string;
    FEditing: boolean;
    FAppType: integer;
    FFileID: string;
    FOldFileID: string;
    FMailSubject: string;
    FReceivedDate: TDateTime;
    FadxLCID: integer;
    FromWord: boolean;
    FIMail: MailItem;
    FromExcel: boolean;
    FTimeNarration: string;
    FSentEmail: boolean;
    FFolder_ID: integer;
    FCategories: string;
    FProp: Outlook2000.UserProperty;
//    procedure GetDetails;
  public
    { Public declarations }
    AWordProps: array[1..11] of TWordProperties;
    property DocName: string read FDocName;
    property AppType: Integer read FAppType write FAppType;
    property MailSubject: string read FMailSubject write FMailSubject;
    property ReceivedDate: TDateTime read FReceivedDate write FReceivedDate;
    property LadxLCID: integer read FadxLCID write FadxLCID;
    property IMail: MailItem read FIMail write FIMail;
    property TimeNarration: string read FTimeNarration write FTimeNarration;
    property SentEmail: boolean read FSentEmail write FSentEmail default False;
  end;

var
  frmSaveDocDetails: TfrmSaveDocDetails;

function ShowDocSave: Integer; StdCall;

implementation

uses
    MatterSearch, SaveDocFunc, ActiveX, OutlookUnit,
    SpeediDocsMail_IMPL, Office2010;

{$R *.dfm}

function ShowDocSave:integer;
var
   frmSaveDocDetails: TfrmSaveDocDetails;
begin
//   Application.Handle := AHandle;
   frmSaveDocDetails := TfrmSaveDocDetails.Create(Application);
   try
      frmSaveDocDetails.ShowModal;
      Result := frmSaveDocDetails.nMatter;
   finally
      FreeAndNil(frmSaveDocDetails);
   end;
end;

procedure TfrmSaveDocDetails.btnCloseClick(Sender: TObject);
var
  Unknown: IUnknown;
  OLEResult: HResult;
  AMacro : string;
begin
   Close;
end;

procedure TfrmSaveDocDetails.FormShow(Sender: TObject);
var
   AMatter: string;
begin
   cmbAuthor.EditValue := dmConnection.UserCode;
   FromWord := False;
   txtDocName.Text := MailSubject;
   Memo1.Text := '';
   FFolder_ID := 0;

   cbLeaveDocOpen.Checked := False;
   cmbAuthor.EditValue := dmConnection.UserCode;
   memoTimeNarration.Text := TimeNarration;
   FProp := nil;
   FCategories := FIMail.Categories;
   FProp := FIMail.UserProperties.Find('MATTER', True);
   if Assigned(Fprop) then
   begin
      AMatter := Fprop.Value;
      with dmConnection.qryCheckEmail do
      begin
         Close;
         ParamByName('descr').AsString := FiMail.Subject;
         ParamByName('D_CREATE').AsDateTime := FiMail.ReceivedTime;
         ParamByName('fileid').AsString := AMatter;
         Open;
         if (FieldByName('rec_found').IsNull = False) then
            Memo1.Text := 'Email already saved to BHL Insight in matter ' + AMatter
         else
            Memo1.Lines.Clear;
         Close;
      end;
   end
   else
   begin
       Memo1.Text := '';
   end;

   if (FSavedInDB = 'N') or (FSavedInDB = '')  then
   begin
      btnTxtDocPath.Text := SystemString('DRAG_DEFAULT_DIRECTORY');
   end;
end;

procedure TfrmSaveDocDetails.btnSaveClick(Sender: TObject);
var
   DocSequence,
   lTask: string;
//   bUsePath: boolean;
   cmbPrecCategoryKeyValue,
   cmbClassificationKeyValue, cmbFolderKeyValue: integer;
begin
   try
      screen.Cursor := crHourGlass;
      if (btnEditMatter.Text = '') then
      begin
         with Application do
         begin
            NormalizeTopMosts;
            MsgInfo('Please enter a Matter number.');
            RestoreTopMosts;
            exit;
         end;
      end;
      if (Memo1.Text <> '') then
      begin
         with Application do
         begin
            NormalizeTopMosts;
            if MsgAsk('Are you sure you want to file to BHL Insight again?') = mrNo then
            begin
                RestoreTopMosts;
                exit;
            end;
         end;
      end;
      if btnTxtDocPath.Text <> '' then
      begin
         try
            if cmbAuthor.Text = '' then
            begin
               with Application do
               begin
                  NormalizeTopMosts;
                  MsgInfo('Please enter an Author.');
                  RestoreTopMosts;
                  exit;
               end;
            end;
            dmConnection.orsInsight.StartTransaction;
            dmConnection.qryMatterAttachments.Open;

            FEditing := False;
//            bUsePath := False;
            tmpdir := IncludeTrailingPathDelimiter(GetEnvironmentVariable('TMP'));

            if ((cbOverwriteDoc.Visible)  and
               (not cbOverwriteDoc.Checked)) then
            begin
               dmConnection.qryMatterAttachments.insert;
               dmConnection.qryMatterAttachments.ParamByName('docid').AsInteger := dmConnection.DocID;
            end
            else
            if (not cbOverwriteDoc.Visible) then
            begin
               dmConnection.qryMatterAttachments.Insert;
               dmConnection.qryMatterAttachments.ParamByName('docid').AsInteger := dmConnection.DocID;
            end
            else
            if (cbOverwriteDoc.Checked) then
            begin
               dmConnection.qryMatterAttachments.Edit;
               FEditing := True;
            end;

//            if bUsePath then
//            begin
//               tmpDir := btnTxtDocPath.Text + '\';
//            end;

//            if txtDocName.Text = '' then
//            begin
//               tmpFileName := tmpDir + dmSaveDoc.DocID +'.doc';
//            end
//            else
//            begin
               if btnTxtDocPath.Text = '' then
                  tmpFileName := txtDocName.Text
               else
                  tmpFileName := btnTxtDocPath.Text;

            try
               if cmbPrecCategory.Text = '' then
                  cmbPrecCategoryKeyValue := -1
               else
                  cmbPrecCategoryKeyValue := cmbPrecCategory.EditValue;

               if cmbClassification.Text = '' then
                  cmbClassificationKeyValue := -1
               else
                  cmbClassificationKeyValue := cmbClassification.EditValue;

               if cmbFolder.Text = '' then
                  cmbFolderKeyValue := -1
               else
                  cmbFolderKeyValue := cmbFolder.EditValue;


               if (cmbTasks.Text <> '') then
                 lTask := cmbTasks.EditValue;
               SaveOutlookMessage(DocSequence, 1,btnTxtDocPath.Text,
                           cbNewCopy.Checked, cbOverwriteDoc.Checked, btnEditMatter.Text,
                           cmbAuthor.EditValue, txtDocName.Text,
                           '','',
                           -1, cmbPrecCategoryKeyValue, cmbClassificationKeyValue, cmbFolderKeyValue,
                           '', edKeywords.Text,
                           ReceivedDate, IMail, True, dmConnection.DocID,
                           chkCreateTime.Checked, memoTimeNarration.Text,
                           neUnits.Value, SentEmail, lTask);

               dmConnection.orsInsight.Commit;
//               if (rgStorage.ItemIndex = 0) and (not cbLeaveDocOpen.Checked) then
//                  DeleteFile(tmpFileName);
            except
               raise;
            end;

         except
            dmConnection.orsInsight.Rollback;
         end;
         Self.Close;
      end
      else
      with Application do
      begin
         NormalizeTopMosts;
         MessageBox('Please enter a document name.','SpeediDocs',MB_OK+MB_ICONEXCLAMATION);
         RestoreTopMosts;
      end;
   finally
      screen.Cursor := crDefault;
   end;
end;


procedure TfrmSaveDocDetails.rgStorageClick(Sender: TObject);
begin
{   case rgStorage.ItemIndex of
      0: begin
            btnTxtDocPath.Visible := False;
            Self.Height := 275;
         end;
      1: begin}
            btnTxtDocPath.Visible := True;
            Self.Height := 307;
//         end;
//   end;
end;

procedure TfrmSaveDocDetails.btnEditMatterPropertiesButtonClick(Sender: TObject;
  AButtonIndex: Integer);
var
   frmMtrSearch: TfrmMtrSearch;
begin
   try
      FreeAndNil(frmMtrSearch);
      frmMtrSearch := TfrmMtrSearch.Create(Application);
      if (frmMtrSearch.ShowModal = mrOK) then
      begin
         btnEditMatter.Text := frmMtrSearch.tvMattersFILEID.EditValue;   // dmSaveDoc.qryMatters.FieldByName('fileid').AsString;   //  dmSaveDoc.qryMatters.FieldByName('fileid').AsString;
         nMatter := frmMtrSearch.tvMattersNMATTER.EditValue;  // dmSaveDoc.qryMatters.FieldByName('nmatter').AsInteger;
//         cmbAuthor.EditValue := TableString('MATTER','NMATTER',nMatter,'AUTHOR');
         FFileID := btnEditMatter.Text;
         cbOverwriteDoc.Enabled := (FOldFileID = FFileID);
         cbNewCopy.Visible := ((FOldFileID <> FFileID) and (FOldFileID <> ''));
         Label7.Caption := TableString('MATTER','NMATTER',nMatter,'SHORTDESCR');
         dmConnection.qryMatterFolderList.Close;
         dmConnection.qryMatterFolderList.ParamByName('nMatter').AsInteger := NMATTER;
         dmConnection.qryMatterFolderList.Open;
      end;
   finally
      FreeAndNil(frmMtrSearch);
   end;
end;

procedure TfrmSaveDocDetails.btnEditMatterPropertiesValidate(
  Sender: TObject; var DisplayValue: Variant; var ErrorText: TCaption;
  var Error: Boolean);
begin
   if string(DisplayValue) <> '' then
   begin
      dmConnection.qryGetMatter.Close;
      dmConnection.qryGetMatter.ParamByName('FILEID').AsString := string(DisplayValue);
      dmConnection.qryGetMatter.Open;
      if dmConnection.qryGetMatter.Eof then
         MsgErr('Invalid Matter Number')
      else
      begin
         nMatter := dmConnection.qryGetMatter.FieldByName('NMATTER').AsInteger;
         FFileID := string(DisplayValue);
//         cmbAuthor.EditValue := TableString('MATTER','NMATTER',nMatter,'AUTHOR');
         cbOverwriteDoc.Enabled := (FOldFileID = FFileID);
         cbNewCopy.Visible := ((FOldFileID <> FFileID) and (FOldFileID <> ''));
      end;
   end;
end;

procedure TfrmSaveDocDetails.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
   Action := caFree;
end;

procedure TfrmSaveDocDetails.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
   dmConnection.tbDocGroups.Close;
   dmConnection.qryPrecClassification.Close;
   dmConnection.qryEmployee.Close;
   dmConnection.qryPrecCategory.Close;
   dmConnection.qryScaleCost.Close;
   dmConnection.qryMatterFolderList.Close;
//   dmConnection.orsInsight.Disconnect;
{   if Assigned(dmSaveDoc) then
   begin
      FreeAndNil(dmSaveDoc);
   end;  }
end;

procedure TfrmSaveDocDetails.FormCreate(Sender: TObject);
begin
   if (not Assigned(dmConnection)) then
      dmConnection := TdmSaveDoc.Create(Application);

   if dmConnection.orsInsight.Connected = False then
   begin
      try
         if (dmConnection.GetUserID = True) then
         begin
            cbOverWriteDoc.Visible := False;
 //            rgStorage.Enabled := (SystemString('DISABLE_SAVE_MODE') = 'N');
         end;
      except
         Exit;
      end;
   end;

   StatusBar.Panels[0].Text := 'Ver: '+ ReportVersion(SysUtils.GetModuleName(HInstance)) + ' (' +DateTimeToStr(FileDateToDateTime(FileAge(SysUtils.GetModuleName(HInstance))))+')';

   dmConnection.qryPrecClassification.Open;
   dmConnection.qryEmployee.Open;
   dmConnection.qryPrecCategory.Open;
   dmConnection.tbDocGroups.Open;
   dmConnection.qryScaleCost.Open;
   dmConnection.qryMatterFolderList.Open;
end;

procedure TfrmSaveDocDetails.btnTxtDocPathPropertiesButtonClick(
  Sender: TObject; AButtonIndex: Integer);
begin
   case AButtonIndex of
      0: begin
            if BrowseDlg.Execute then
               btnTxtDocPath.Text := BrowseDlg.Directory
         end;
      1: btnTxtDocPath.Text := SystemString('DRAG_DEFAULT_DIRECTORY');
   end;
end;

procedure TfrmSaveDocDetails.cbSaveAsPrecedentClick(Sender: TObject);
begin
    btnTxtDocPath.Text := SystemString('DOC_DEFAULT_DIRECTORY');
end;

procedure TfrmSaveDocDetails.chkCreateTimeClick(Sender: TObject);
begin
   dxLayoutGroupTimeFields.Enabled := chkCreateTime.Checked;
end;

procedure TfrmSaveDocDetails.cmbCategoryPropertiesInitPopup(
  Sender: TObject);
begin
//   dmSavedoc.qryPrecCategory.Close;
//   dmSavedoc.qryPrecCategory.Open;
end;

procedure TfrmSaveDocDetails.btnEditMatterExit(Sender: TObject);
begin
   if string(btnEditMatter.Text) <> '' then
   begin
      dmConnection.qryGetMatter.Close;
      dmConnection.qryGetMatter.ParamByName('FILEID').AsString := string(btnEditMatter.Text);
      dmConnection.qryGetMatter.Open;
      if dmConnection.qryGetMatter.Eof then
         MsgErr('Invalid Matter Number')
      else
      begin
         nMatter := dmConnection.qryGetMatter.FieldByName('NMATTER').AsInteger;
         FFileID := string(btnEditMatter.Text);
         Label7.Caption := TableString('MATTER','NMATTER',nMatter,'SHORTDESCR');
//         cmbAuthor.EditValue := TableString('MATTER','NMATTER',nMatter,'AUTHOR');
         cbOverwriteDoc.Enabled := (FOldFileID = FFileID);
         cbNewCopy.Visible := ((FOldFileID = FFileID) and (FOldFileID = ''));
         dmConnection.qryMatterFolderList.Close;
         dmConnection.qryMatterFolderList.ParamByName('nMatter').AsInteger := NMATTER;
         dmConnection.qryMatterFolderList.Open;
      end;
   end;
end;


procedure TfrmSaveDocDetails.btnEditMatterKeyPress(Sender: TObject;
  var Key: Char);
var
   lFileID,
   lFoundFileID: string;
   nmatter: integer;
begin
   if (key = #$D) then
   begin
      lFileID := PadFileID(btnEditMatter.Text);
      dmConnection.FindMatter(lFoundFileID, nmatter, lFileID);
      btnEditMatter.Text := lFoundFileID;
//    btnEditMatter.ValidateEdit();
      dmConnection.qryMatterFolderList.Close;
      dmConnection.qryMatterFolderList.ParamByName('nMatter').AsInteger := nmatter;
      dmConnection.qryMatterFolderList.Open;
   end;
end;

procedure TfrmSaveDocDetails.dockbtnDefaultPathClick(Sender: TObject);
begin
   if (FromWord = False) and (FromExcel = False) then
      btnTxtDocPath.Text := SystemString('DRAG_DEFAULT_DIRECTORY')
   else
      btnTxtDocPath.Text := SystemString('DOC_DEFAULT_DIRECTORY');
end;



end.
